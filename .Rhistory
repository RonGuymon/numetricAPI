install.packages(c("devtools", "roxygen2"))
library(devtools)
library(roxygen2)
packrat::restore(prompt = FALSE)
install.packages(c("dplyr", "magrittr"))
library(c("dplyr", "magrittr"))
library("dplyr")
library("magrittr")
library(magrittr)
library("httr", lib.loc="~/Google Drive/Client Services/Other data/numetricApi/packrat/lib/x86_64-apple-darwin13.4.0/3.3.2")
library("jsonlite", lib.loc="~/Google Drive/Client Services/Other data/numetricApi/packrat/lib/x86_64-apple-darwin13.4.0/3.3.2")
document()
library(numetricApi)
?getDatasets
a <- getDatasets(apiKey = "KHKh89Y0icGaK3c3h%2B9NGecpCWPFJ10gCTZZZPcgjSs%3D")
View(a)
library(numetricApi)
?getDatasetStatus
library(numetricApi)
?createDataset
library(numetricApi)
?addRows
library(numetricApi)
git remote add numetricAPI https://github.com/RonGuymon/numetricAPI.git
library(numetricApi)
excludes <- "yo"
length(excludes)
excludes <- ""
length(excludes)
excludes <- ""
length(excludes)
excludes <- c("nothing")
length(excludes)
excludes <- c("geoshape", "geopoint", "nada")
excludeCols <- paste0('"excludes":["',excludes[1],'"')
if(length(excludes) > 1){
for(i in 2:length(excludes)){
excludes <- paste0(excludeCols,',"',excludes[i],'"')
if(i == length(excludes)){
paste0(exludeCols,']')
}
}
excludeCols
}
excludeCols <- paste0('"excludes":["',excludes[1],'"')
if(length(excludes) > 1){
for(i in 2:length(excludes)){
excludes <- paste0(excludeCols,',"',excludes[i],'"')
if(i == length(excludes)){
paste0(exludeCols,']')
}
}
}
excludeCols
excludeCols <- paste0('"excludes":["',excludes[1],'"')
if(length(excludes) > 1){
for(i in 2:length(excludes)){
excludeCols <- paste0(excludeCols,',"',excludes[i],'"')
if(i == length(excludes)){
paste0(exludeCols,']')
}
}
}
excludeCols
excludeCols <- paste0('"excludes":["',excludes[1],'"')
excludeCols
excludes[1]
excludes <- c("geoshape", "geopoint", "nada")
excludeCols <- paste0('"excludes":["',excludes[1],'"')
excludeCols
if(length(excludes) > 1){
for(i in 2:length(excludes)){
excludeCols <- paste0(excludeCols,',"',excludes[i],'"')
if(i == length(excludes)){
paste0(exludeCols,']')
}
}
}
excludes <- c("geoshape", "geopoint", "nada")
excludeCols <- paste0('"excludes":["',excludes[1],'"')
if(length(excludes) > 1){
for(i in 2:length(excludes)){
excludeCols <- paste0(excludeCols,',"',excludes[i],'"')
if(i == length(excludes)){
paste0(excludeCols,']')
}
}
}
excludeCols
excludeCols <- paste(excludes, collapse = T, sep = '","')
?paste
excludes <- c("geoshape", "geopoint", "nada")
excludeCols <- paste(excludes, collapse = '","')
excludeCols
excludeCols <- paste0(',"excludes":[', excludeCols,']')
excludeCols
excludes <- c("geoshape", "geopoint", "nada")
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
excludeCols
excludes <- c("geoshape", "geopoint", "nada")
includes <- c("this", "that", "the other")
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0('"includes":["', includeCols, '"],')
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
body <- paste0(
'{', includeCols, excludeCols, '}'
)
body
getAllRows <- function(apiKey, datasetId, includes, excludes){
# Includes
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0('"includes":["', includeCols, '"]')
# Excludes
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
# Body
body <- paste0(
'{', includeCols, excludeCols, '}'
)
r <- POST(paste0('https://api.numetric.com/v2/dataset/', datasetId, "/all"),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- paste("[", response, "]", sep = "") # Adds the beginning and closing brackets
response <- gsub("[\n]", ",", response) # Replaces carriage returns with commas
response <- gsub(",]", "]", response) # Removes the last comma
response <- fromJSON(response) %>% as.data.frame() # Converts what was returned to a dataframe
}
apiKey <- "L%2Bvp0mFCr3jbrW%2Bd8ofS6CmLKRpjatv7b7PsdXpNwig%3D"
datasetId <- "0bd9854d-dc58-475d-9bcc-7bb7d46f20af"
size <- 200
excludes <- c("geoShape", "geoPoint")
getAllRows <- function(apiKey, datasetId, size = 10000, includes, excludes){
# Size
sizePart <- paste0('"size":', size)
# Includes
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
# Excludes
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
# Body
body <- paste0(
'{', includeCols, excludeCols, '}'
)
r <- POST(paste0('https://api.numetric.com/v2/dataset/', datasetId, "/all"),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- paste("[", response, "]", sep = "") # Adds the beginning and closing brackets
response <- gsub("[\n]", ",", response) # Replaces carriage returns with commas
response <- gsub(",]", "]", response) # Removes the last comma
response <- fromJSON(response) %>% as.data.frame() # Converts what was returned to a dataframe
}
sizePart <- paste0('"size":', size)
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
body <- paste0(
'{', includeCols, excludeCols, '}'
)
body
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
body
includes <- NULL
rm(includes)
sizePart <- paste0('"size":', size)
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
if(exists(includes)){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
}
?exists
if(exists("includes")){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
}
apiKey <- "L%2Bvp0mFCr3jbrW%2Bd8ofS6CmLKRpjatv7b7PsdXpNwig%3D"
datasetId <- "0bd9854d-dc58-475d-9bcc-7bb7d46f20af"
size <- 200
excludes <- c("geoShape", "geoPoint")
rm(includes)
sizePart <- paste0('"size":', size)
if(exists("includes")){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
}
if(exists("excludes")){
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
}
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
body
exists("includes")
rm(includeCols)
sizePart <- paste0('"size":', size)
if(exists("includes")){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
}
if(exists("excludes")){
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
}
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
sizePart <- paste0('"size":', size)
if(exists("includes")){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
} else{
includeCols <- ""
}
if(exists("excludes")){
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
} else{
excludeCols <- ""
}
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
body
getAllRows <- function(apiKey, datasetId, size = 10000, includes, excludes){
# Size
sizePart <- paste0('"size":', size)
# Includes
if(exists("includes")){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
} else{
includeCols <- ""
}
# Excludes
if(exists("excludes")){
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
} else{
excludeCols <- ""
}
# Body
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
r <- POST(paste0('https://api.numetric.com/v2/dataset/', datasetId, "/all"),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- paste("[", response, "]", sep = "") # Adds the beginning and closing brackets
response <- gsub("[\n]", ",", response) # Replaces carriage returns with commas
response <- gsub(",]", "]", response) # Removes the last comma
response <- fromJSON(response) %>% as.data.frame() # Converts what was returned to a dataframe
}
a <- getAllRows(apiKey = apiKey, datasetId = datasetId, size = 200, excludes = excludes)
?missing
missing(includes)
missing(includes)
if(missing(includes)){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
} else{
includeCols <- ""
}
getAllRows <- function(apiKey, datasetId, size = 10000, includes, excludes){
# Size
sizePart <- paste0('"size":', size)
# Includes
if(missing(includes)){
includeCols <- ""
} else{
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
}
# Excludes
if(missing(excludes)){
excludeCols <- ""
} else{
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
}
# Body
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
r <- POST(paste0('https://api.numetric.com/v2/dataset/', datasetId, "/all"),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- paste("[", response, "]", sep = "") # Adds the beginning and closing brackets
response <- gsub("[\n]", ",", response) # Replaces carriage returns with commas
response <- gsub(",]", "]", response) # Removes the last comma
response <- fromJSON(response) %>% as.data.frame() # Converts what was returned to a dataframe
}
apiKey <- "L%2Bvp0mFCr3jbrW%2Bd8ofS6CmLKRpjatv7b7PsdXpNwig%3D"
datasetId <- "0bd9854d-dc58-475d-9bcc-7bb7d46f20af"
size <- 200
excludes <- c("geoShape", "geoPoint")
a <- getAllRows(apiKey = apiKey, datasetId = datasetId, size = 200, excludes = excludes)
library(numetricApi)
library(numetricApi)
library(numetricApi)
a <- getAllRowsV3 <- ("OJ%2BmkY310TI%2B559%2BOa5SaLwJ8Dd0LAFckpqJSJI7vnY%3D", "3b0e052f-330d-4622-a486-50dea564f3ee")
a <- getAllRowsV3 <- (apiKey = "OJ%2BmkY310TI%2B559%2BOa5SaLwJ8Dd0LAFckpqJSJI7vnY%3D", datasetId = "3b0e052f-330d-4622-a486-50dea564f3ee")
getAllRowsV3 <- function(apiKey, datasetId){
r <- GET(paste('https://api.numetric.com/v3/table/', datasetId, '/rows', sep = ""),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
body = body,
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- paste("[", response, "]", sep = "") # Adds the beginning and closing brackets
response <- gsub("[\n]", ",", response) # Replaces carriage returns with commas
response <- gsub(",]", "]", response) # Removes the last comma
response <- fromJSON(response) %>% as.data.frame() # Converts what was returned to a dataframe
response
}
a <- getAllRowsV3 <- (apiKey = "OJ%2BmkY310TI%2B559%2BOa5SaLwJ8Dd0LAFckpqJSJI7vnY%3D", datasetId = "3b0e052f-330d-4622-a486-50dea564f3ee")
a <- getAllRowsV3(apiKey = "OJ%2BmkY310TI%2B559%2BOa5SaLwJ8Dd0LAFckpqJSJI7vnY%3D", datasetId = "3b0e052f-330d-4622-a486-50dea564f3ee")
View(a)
apiKey <- "	CKwDAykaPQ9NK0VXhPG%2FRZRKwoL7Bvjdn%2BuwyC%2Blql8%3D"
library(httr)
library(magrittr)
library(jsonlite)
r <- GET("https://api.numetric.com/v3/table",
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response
response <- fromJSON(response) # Converts what was returned to a dataframe
View(response)
tableId <- "0fe71ab6-5f9e-4c73-8786-f328d7772cf5"
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- fromJSON(response) # Converts what was returned to a dataframe
response
library(rlist)
install.packages("rlist")
library(rlist)
r2 <- list.stack(response)
r2 <- list.flatten(response)
r2 <- list.stack(r2)
r2 <- list.flatten(response) %>% as.data.frame()
View(r2)
colnames(r2) <- gsub("\\.", "_", colnames(r2))
r2 <- r2[,which(grepl("fields_", x = colnames(r2)) == F)]
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- fromJSON(response) # Converts what was returned to a dataframe
r2 <- list.flatten(response) %>% as.data.frame()
colnames(r2) <- gsub("\\.", "_", colnames(r2))
20650*1.08
