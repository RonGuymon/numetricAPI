sizePart <- paste0('"size":', size)
if(exists("includes")){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
} else{
includeCols <- ""
}
if(exists("excludes")){
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
} else{
excludeCols <- ""
}
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
body
getAllRows <- function(apiKey, datasetId, size = 10000, includes, excludes){
# Size
sizePart <- paste0('"size":', size)
# Includes
if(exists("includes")){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
} else{
includeCols <- ""
}
# Excludes
if(exists("excludes")){
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
} else{
excludeCols <- ""
}
# Body
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
r <- POST(paste0('https://api.numetric.com/v2/dataset/', datasetId, "/all"),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- paste("[", response, "]", sep = "") # Adds the beginning and closing brackets
response <- gsub("[\n]", ",", response) # Replaces carriage returns with commas
response <- gsub(",]", "]", response) # Removes the last comma
response <- fromJSON(response) %>% as.data.frame() # Converts what was returned to a dataframe
}
a <- getAllRows(apiKey = apiKey, datasetId = datasetId, size = 200, excludes = excludes)
?missing
missing(includes)
missing(includes)
if(missing(includes)){
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
} else{
includeCols <- ""
}
getAllRows <- function(apiKey, datasetId, size = 10000, includes, excludes){
# Size
sizePart <- paste0('"size":', size)
# Includes
if(missing(includes)){
includeCols <- ""
} else{
includeCols <- paste(includes, collapse = '","')
includeCols <- paste0(',"includes":["', includeCols, '"]')
}
# Excludes
if(missing(excludes)){
excludeCols <- ""
} else{
excludeCols <- paste(excludes, collapse = '","')
excludeCols <- paste0(',"excludes":["', excludeCols,'"]')
}
# Body
body <- paste0(
'{', sizePart, includeCols, excludeCols, '}'
)
r <- POST(paste0('https://api.numetric.com/v2/dataset/', datasetId, "/all"),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- paste("[", response, "]", sep = "") # Adds the beginning and closing brackets
response <- gsub("[\n]", ",", response) # Replaces carriage returns with commas
response <- gsub(",]", "]", response) # Removes the last comma
response <- fromJSON(response) %>% as.data.frame() # Converts what was returned to a dataframe
}
apiKey <- "L%2Bvp0mFCr3jbrW%2Bd8ofS6CmLKRpjatv7b7PsdXpNwig%3D"
datasetId <- "0bd9854d-dc58-475d-9bcc-7bb7d46f20af"
size <- 200
excludes <- c("geoShape", "geoPoint")
a <- getAllRows(apiKey = apiKey, datasetId = datasetId, size = 200, excludes = excludes)
library(numetricApi)
library(numetricApi)
library(numetricApi)
a <- getAllRowsV3 <- ("OJ%2BmkY310TI%2B559%2BOa5SaLwJ8Dd0LAFckpqJSJI7vnY%3D", "3b0e052f-330d-4622-a486-50dea564f3ee")
a <- getAllRowsV3 <- (apiKey = "OJ%2BmkY310TI%2B559%2BOa5SaLwJ8Dd0LAFckpqJSJI7vnY%3D", datasetId = "3b0e052f-330d-4622-a486-50dea564f3ee")
getAllRowsV3 <- function(apiKey, datasetId){
r <- GET(paste('https://api.numetric.com/v3/table/', datasetId, '/rows', sep = ""),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
body = body,
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- paste("[", response, "]", sep = "") # Adds the beginning and closing brackets
response <- gsub("[\n]", ",", response) # Replaces carriage returns with commas
response <- gsub(",]", "]", response) # Removes the last comma
response <- fromJSON(response) %>% as.data.frame() # Converts what was returned to a dataframe
response
}
a <- getAllRowsV3 <- (apiKey = "OJ%2BmkY310TI%2B559%2BOa5SaLwJ8Dd0LAFckpqJSJI7vnY%3D", datasetId = "3b0e052f-330d-4622-a486-50dea564f3ee")
a <- getAllRowsV3(apiKey = "OJ%2BmkY310TI%2B559%2BOa5SaLwJ8Dd0LAFckpqJSJI7vnY%3D", datasetId = "3b0e052f-330d-4622-a486-50dea564f3ee")
View(a)
apiKey <- "	CKwDAykaPQ9NK0VXhPG%2FRZRKwoL7Bvjdn%2BuwyC%2Blql8%3D"
library(httr)
library(magrittr)
library(jsonlite)
r <- GET("https://api.numetric.com/v3/table",
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response
response <- fromJSON(response) # Converts what was returned to a dataframe
View(response)
tableId <- "0fe71ab6-5f9e-4c73-8786-f328d7772cf5"
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- fromJSON(response) # Converts what was returned to a dataframe
response
library(rlist)
install.packages("rlist")
library(rlist)
r2 <- list.stack(response)
r2 <- list.flatten(response)
r2 <- list.stack(r2)
r2 <- list.flatten(response) %>% as.data.frame()
View(r2)
colnames(r2) <- gsub("\\.", "_", colnames(r2))
r2 <- r2[,which(grepl("fields_", x = colnames(r2)) == F)]
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- content(r, as = "text") # Saves what was returned as raw text with all the encodings
response <- fromJSON(response) # Converts what was returned to a dataframe
r2 <- list.flatten(response) %>% as.data.frame()
colnames(r2) <- gsub("\\.", "_", colnames(r2))
20650*1.08
setwd("/Users/ronguymon/Google Drive/Client Services/BariatricEating")
library(tidyverse)
library(magrittr)
library(lubridate)
library(googleAnalyticsR)
apiKey <- "SMGfRBqmXanyL9mCigflRpJUONSbHvxFxWS1Y3Y1sms%3D"
tableId <- "6f059e23-130b-4ec7-a186-cb4a7749c882"
category <- "Gnocchi"
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
library(httr)
library(dplyr)
library(magrittr)
apiKey <- "SMGfRBqmXanyL9mCigflRpJUONSbHvxFxWS1Y3Y1sms%3D"
tableId <- "6f059e23-130b-4ec7-a186-cb4a7749c882"
category <- "Gnocchi"
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- httr::content(r, as = "text") %>% fromJSON()
library(jsonlite)
response <- httr::content(r, as = "text") %>% fromJSON()
response
trannies <- response$transformations
View(trannies)
tableId <- "c1753796-83fa-4a65-aaa9-fd71d56462a9" # Signbase
tableId <- "c1753796-83fa-4a65-aaa9-fd71d56462a9" # Signbase
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- httr::content(r, as = "text") %>% fromJSON()
response
trannies <- response$transformations
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- httr::content(r, as = "text") %>% fromJSON()
response
trannies <- response$transformations
View(trannies)
transformations <- trannies %>%
mutate(
index = ifelse(index == 1, 3, 4)
) %>%
bind_rows(trannies, .)
View(transformations)
transformations <- trannies %>%
mutate(
sourceField = "L2DirOfTravel",
targetField = "L2DirOfTravel",
index = ifelse(index == 1, 3, 4)
) %>%
bind_rows(trannies, .)
if(exists("dataframeName")){
## Create a dataframe with column attributes----
# Create a dataframe with columns for each field: field, displayName, autocomplete, and type.
fieldAttributes <- data.frame(field = colnames(dataframeName), # Gets the column names of the dataset to index
displayName = colnames(dataframeName), # Uses the column names of the dataset as the display names
# autocomplete = rep("false", ncol(dataframeName)), # Does not make anything autocompletable
type = array(lapply(dataframeName, class)) %>% as.character() # Gets the class of each column in the dataframe
)
# Convert r class types to valid numetric class types
fieldAttributes <- mutate(fieldAttributes, type = ifelse(type == "character", "string",
ifelse(type == "numeric", "double",
ifelse(type == "integer", "integer",
ifelse(type == "Date" | type == "POSIXct" | type == "POSIXlt", "datetime", "string")))))
# Add in the fields that should be autocompleted and geocoded
fieldAttributes <- mutate(fieldAttributes,
type = ifelse(field %in% geoshapes, "geo_shape",
ifelse(field %in% geopoints, "geo_point", type)),
type = ifelse(grepl("date", field, ignore.case = T), "datetime", type),
type = ifelse(field %in% boolean, "boolean", type)
)
wholeString <- ""
for (i in 1:nrow(fieldAttributes)){
tempString <- paste0('"',fieldAttributes[i,1],'": {"displayName": "',fieldAttributes[i,2] ,'","type": "',fieldAttributes[i,3],'"},')
wholeString <- paste0(wholeString,tempString)
if(i == nrow(fieldAttributes)){
wholeString <- gsub(",$","",wholeString)
}
}
fieldAttributesReady_body <- paste0('"fields": {',wholeString,'}')
}else{
fieldAttributesReady_body <- '"deleteMe"'
}
if(exists("numetricName")){
numetricName_body <- paste0('"name": "', numetricName, '"')
}else{
numetricName_body <- '"deleteMe"'
}
if(exists("primaryKey")){
primaryKey_body <- paste0('"primaryKey": ["', primaryKey, '"]')
}else{
primaryKey_body <- '"deleteMe"'
}
if(exists("category")){
category_body <- paste0('"categories": ["', category, '"]')
}else{
category_body <- '"deleteMe"'
}
if(exists("description")){
description_body <- paste0('"description": "', description, '"')
}else{
description_body <- '"deleteMe"'
}
if(exists("transformations")){
transofrmations_body <- paste0('"transformations":', toJSON(transformations))
}else{
transofrmations_body <- '"deleteMe"'
}
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations,
sep = ",") %>%
gsub('"deleteMe",', '', .)
metadata
if(exists("transformations")){
transformations_body <- paste0('"transformations":', toJSON(transformations))
}else{
transformations_body <- '"deleteMe"'
}
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",', '', .)
metadata
rm(transformations)
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",', '', .)
metadata
rm(transformations, transformations_body)
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",', '', .)
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",', '', .)
rm(transformations, transformations_body)
if(exists("transformations")){
transformations_body <- paste0('"transformations":', toJSON(transformations))
}else{
transformations_body <- '"deleteMe"'
}
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",', '', .)
metadata
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",|"deleteMe"', '', .)
metadata
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",|"deleteMe"|,$', '', .)
metadata
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",")
metadata
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",|"deleteMe"|,"deleteMe"', '', .)
metadata
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",|"deleteMe"|,"deleteMe"', '', .) %>%
paste0('{', ., '}')
metadata
r <- PATCH(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
body = metadata,
verbose()
)
r <- PATCH(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
body = metadata,
verbose()
)
r <- PATCH(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
body = metadata,
verbose()
)
transformations <- trannies %>%
mutate(
sourceField = "L2DirOfTravel",
targetField = "L2DirOfTravel",
index = ifelse(index == 1, 3, 4)
) %>%
bind_rows(trannies, .)
if(exists("dataframeName")){
## Create a dataframe with column attributes----
# Create a dataframe with columns for each field: field, displayName, autocomplete, and type.
fieldAttributes <- data.frame(field = colnames(dataframeName), # Gets the column names of the dataset to index
displayName = colnames(dataframeName), # Uses the column names of the dataset as the display names
# autocomplete = rep("false", ncol(dataframeName)), # Does not make anything autocompletable
type = array(lapply(dataframeName, class)) %>% as.character() # Gets the class of each column in the dataframe
)
# Convert r class types to valid numetric class types
fieldAttributes <- mutate(fieldAttributes, type = ifelse(type == "character", "string",
ifelse(type == "numeric", "double",
ifelse(type == "integer", "integer",
ifelse(type == "Date" | type == "POSIXct" | type == "POSIXlt", "datetime", "string")))))
# Add in the fields that should be autocompleted and geocoded
fieldAttributes <- mutate(fieldAttributes,
type = ifelse(field %in% geoshapes, "geo_shape",
ifelse(field %in% geopoints, "geo_point", type)),
type = ifelse(grepl("date", field, ignore.case = T), "datetime", type),
type = ifelse(field %in% boolean, "boolean", type)
)
wholeString <- ""
for (i in 1:nrow(fieldAttributes)){
tempString <- paste0('"',fieldAttributes[i,1],'": {"displayName": "',fieldAttributes[i,2] ,'","type": "',fieldAttributes[i,3],'"},')
wholeString <- paste0(wholeString,tempString)
if(i == nrow(fieldAttributes)){
wholeString <- gsub(",$","",wholeString)
}
}
fieldAttributesReady_body <- paste0('"fields": {',wholeString,'}')
}else{
fieldAttributesReady_body <- '"deleteMe"'
}
if(exists("numetricName")){
numetricName_body <- paste0('"name": "', numetricName, '"')
}else{
numetricName_body <- '"deleteMe"'
}
if(exists("primaryKey")){
primaryKey_body <- paste0('"primaryKey": ["', primaryKey, '"]')
}else{
primaryKey_body <- '"deleteMe"'
}
if(exists("category")){
category_body <- paste0('"categories": ["', category, '"]')
}else{
category_body <- '"deleteMe"'
}
if(exists("description")){
description_body <- paste0('"description": "', description, '"')
}else{
description_body <- '"deleteMe"'
}
if(exists("transformations")){
transformations_body <- paste0('"transformations":', toJSON(transformations))
}else{
transformations_body <- '"deleteMe"'
}
metadata <- paste(numetricName_body,
primaryKey_body,
category_body,
description_body,
fieldAttributesReady_body,
transformations_body,
sep = ",") %>%
gsub('"deleteMe",|"deleteMe"|,"deleteMe"', '', .) %>%
paste0('{', ., '}')
metadata
r <- PATCH(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
body = metadata,
verbose()
)
tableId
tableId <- "6f059e23-130b-4ec7-a186-cb4a7749c882" #Signbase2
r <- PATCH(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
body = metadata,
verbose()
)
r <- GET(paste0("https://api.numetric.com/v3/table/", tableId),
add_headers("Authorization" = apiKey,
"Content-Type" = "application/json"),
verbose()
)
response <- httr::content(r, as = "text") %>% # Saves what was returned as raw text with all the encodings
fromJSON(response) # Converts what was returned to a dataframe
response$transformations
r2 <- list.flatten(response) %>% as.data.frame()
library(rlist)
r2 <- list.flatten(response) %>% as.data.frame()
colnames(r2) <- gsub("\\.", "_", colnames(r2))
if(fieldNames == F){
r2 <- r2[,which(grepl("fields_", x = colnames(r2)) == F)]
}
View(r2)
View(trannies)
